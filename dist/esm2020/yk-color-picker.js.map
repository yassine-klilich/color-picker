{"version":3,"file":"yk-color-picker.js","sources":["../../src/utility.ts","../../src/yk-color-parser.ts","../../src/yk-color.ts","../../src/yk-color-picker.ts"],"sourcesContent":["export function hexPad2(value: number) {\r\n  return value.toString(16).padStart(2, \"0\");\r\n}\r\n\r\nexport function createElement(\r\n  tag: string,\r\n  classList: string[],\r\n  attributes?: any\r\n) {\r\n  const el = document.createElement(tag);\r\n  if (classList != null) {\r\n    el.classList.add(...classList);\r\n  }\r\n  if (attributes) {\r\n    for (const key in attributes) {\r\n      if (Object.prototype.hasOwnProperty.call(attributes, key)) {\r\n        el.setAttribute(key, attributes[key]);\r\n      }\r\n    }\r\n  }\r\n  return el;\r\n}\r\n\r\nexport function attachEvent(\r\n  element: HTMLElement | Window | Document,\r\n  eventName: string,\r\n  eventHandler: any\r\n) {\r\n  element.addEventListener(eventName, eventHandler);\r\n}\r\n\r\nexport default {\r\n  hexPad2,\r\n  createElement,\r\n  attachEvent,\r\n};\r\n","import { hexPad2 } from \"./utility\";\r\n\r\n/**\r\n * Color Parser\r\n */\r\nexport const YKColorParser = {\r\n  parse: function (color: string) {\r\n    if (color == undefined) {\r\n      throw new Error(\"YKColorParser:: color is undefined\");\r\n    }\r\n\r\n    if (typeof color == \"string\") {\r\n      color = color.trim();\r\n\r\n      if (/^(rgba?)/i.test(color)) {\r\n        return this.compileRGB(color);\r\n      }\r\n      if (/^(#)/i.test(color)) {\r\n        return this.compileHEX(color);\r\n      }\r\n      let rgb: string | undefined = this.getNamedColor(color.toLowerCase());\r\n      if (rgb != undefined) {\r\n        const _rgb = rgb.split(\" \");\r\n        const { h, s, v } = YKColorParser.RGBtoHSV(\r\n          parseInt(_rgb[0]),\r\n          parseInt(_rgb[1]),\r\n          parseInt(_rgb[2])\r\n        );\r\n        return { h, s, v, a: 1 };\r\n      }\r\n    } else {\r\n      const { r, g, b, a } = color;\r\n      if (\r\n        r >= 0 &&\r\n        r <= 255 &&\r\n        g >= 0 &&\r\n        g <= 255 &&\r\n        b >= 0 &&\r\n        b <= 255 &&\r\n        a >= 0 &&\r\n        a <= 1\r\n      ) {\r\n        const { h, s, v } = YKColorParser.RGBtoHSV(r, g, b);\r\n        return { h, s, v, a };\r\n      }\r\n      throw new Error(\r\n        \"YKColorParser:: The provided RGB object has invalid values, please make sure red, green, blue are between 0 and 255 and alpha value is between 0 and 1\"\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      \"YKColorParser:: Color is not in RGB or HEX format or a named color\"\r\n    );\r\n  },\r\n\r\n  compileRGB: function (color: string) {\r\n    let r, g, b, a;\r\n\r\n    const regexRGB =\r\n      /rgba?\\(\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s*(\\s+(0?(\\.\\d+)?|1(\\.0*)?)\\s*)?\\)/i;\r\n\r\n    if (regexRGB.test(color)) {\r\n      const splitColor = color\r\n        .split(regexRGB)\r\n        .filter((i) => !isNaN(parseInt(i)) && i != \"\" && i != null);\r\n      r = parseInt(splitColor[0]);\r\n      g = parseInt(splitColor[1]);\r\n      b = parseInt(splitColor[2]);\r\n      a = parseFloat(splitColor[3]);\r\n\r\n      if (r > 255) {\r\n        throw new RangeError(\r\n          `YKColorParser:: '${color}' --> ${r} has an invalid red color, it must be an interger between 0 and 255`\r\n        );\r\n      }\r\n      if (g > 255) {\r\n        throw new RangeError(\r\n          `YKColorParser:: '${color}' --> ${g} has an invalid green color, it must be an interger between 0 and 255`\r\n        );\r\n      }\r\n      if (b > 255) {\r\n        throw new RangeError(\r\n          `YKColorParser:: '${color}' --> ${b} has an invalid blue color, it must be an interger between 0 and 255`\r\n        );\r\n      }\r\n\r\n      const { h, s, v } = YKColorParser.RGBtoHSV(r, g, b);\r\n      return { h, s, v, a: isNaN(a) ? 1 : a };\r\n    }\r\n\r\n    throw new SyntaxError(\r\n      `YKColorParser:: '${color}' is an invalid RGB format`\r\n    );\r\n  },\r\n\r\n  compileHEX: function (color: string) {\r\n    const rgb = YKColorParser.HEXtoRGBA(color);\r\n    if (rgb) {\r\n      const { r, g, b, a } = rgb;\r\n      const { h, s, v } = YKColorParser.RGBtoHSV(r, g, b);\r\n      return { h, s, v, a };\r\n    }\r\n    throw new Error(`YKColorParser:: '${color}' is an invalid HEX format`);\r\n  },\r\n\r\n  RGBtoHSV: function (r: number, g: number, b: number) {\r\n    (r /= 255), (g /= 255), (b /= 255);\r\n\r\n    let max = Math.max(r, g, b),\r\n      min = Math.min(r, g, b);\r\n    let h = 0,\r\n      s = 0,\r\n      v = max;\r\n\r\n    let d = max - min;\r\n    s = max == 0 ? 0 : d / max;\r\n\r\n    if (max == min) {\r\n      h = 0;\r\n    } else {\r\n      switch (max) {\r\n        case r:\r\n          h = (g - b) / d + (g < b ? 6 : 0);\r\n          break;\r\n        case g:\r\n          h = (b - r) / d + 2;\r\n          break;\r\n        case b:\r\n          h = (r - g) / d + 4;\r\n          break;\r\n      }\r\n\r\n      h /= 6;\r\n    }\r\n\r\n    h = h * 360;\r\n    s = s * 100;\r\n    v = v * 100;\r\n\r\n    return { h, s, v };\r\n  },\r\n\r\n  HSLtoHSV: function (h: number, s: number, l: number) {\r\n    const hsv1 = (s * (l < 50 ? l : 100 - l)) / 100;\r\n\r\n    return {\r\n      h,\r\n      s: hsv1 === 0 ? 0 : ((2 * hsv1) / (l + hsv1)) * 100,\r\n      v: l + hsv1,\r\n    };\r\n  },\r\n\r\n  HEXtoRGBA: function (hex: string) {\r\n    let r = 0,\r\n      g = 0,\r\n      b = 0,\r\n      a = 0;\r\n\r\n    if (/^#(([a-f0-9]){3,4}|([a-f0-9]){6}|([a-f0-9]){8})$/i.test(hex)) {\r\n      if (hex.length < 6) {\r\n        const splitHexValues = hex.split(\"\");\r\n        r = +(\"0x\" + splitHexValues[1] + splitHexValues[1]);\r\n        g = +(\"0x\" + splitHexValues[2] + splitHexValues[2]);\r\n        b = +(\"0x\" + splitHexValues[3] + splitHexValues[3]);\r\n        a = splitHexValues[4]\r\n          ? parseFloat(\r\n              (+(\"0x\" + splitHexValues[4] + splitHexValues[4]) / 255).toFixed(2)\r\n            )\r\n          : 1;\r\n      } else if (hex.length < 10) {\r\n        const splitHexValues = hex.split(/([a-f0-9]{2})/i);\r\n        r = +(\"0x\" + splitHexValues[1]);\r\n        g = +(\"0x\" + splitHexValues[3]);\r\n        b = +(\"0x\" + splitHexValues[5]);\r\n        a = splitHexValues[7]\r\n          ? parseFloat((+(\"0x\" + splitHexValues[7]) / 255).toFixed(2))\r\n          : 1;\r\n      }\r\n\r\n      return { r, g, b, a };\r\n    }\r\n  },\r\n\r\n  RGBAtoHEX: function (r: number, g: number, b: number, a: number) {\r\n    return `#${hexPad2(Math.round(r))}${hexPad2(Math.round(g))}${hexPad2(\r\n      Math.round(b)\r\n    )}${a == 1 ? \"\" : hexPad2(Math.round(a * 255))}`;\r\n  },\r\n\r\n  getNamedColor: function (color: string): string | undefined {\r\n    return {\r\n      aliceblue: \"240 248 255\",\r\n      antiquewhite: \"250 235 215\",\r\n      aqua: \"0 255 255\",\r\n      aquamarine: \"127 255 212\",\r\n      azure: \"240 255 255\",\r\n      beige: \"245 245 220\",\r\n      bisque: \"255 228 196\",\r\n      black: \"0 0 0\",\r\n      blanchedalmond: \"255 235 205\",\r\n      blue: \"0 0 255\",\r\n      blueviolet: \"138 43 226\",\r\n      brown: \"165 42 42\",\r\n      burlywood: \"222 184 135\",\r\n      cadetblue: \"95 158 160\",\r\n      chartreuse: \"127 255 0\",\r\n      chocolate: \"210 105 30\",\r\n      coral: \"255 127 80\",\r\n      cornflowerblue: \"100 149 237\",\r\n      cornsilk: \"255 248 220\",\r\n      crimson: \"220 20 60\",\r\n      cyan: \"0 255 255\",\r\n      darkblue: \"0 0 139\",\r\n      darkcyan: \"0 139 139\",\r\n      darkgoldenrod: \"184 134 11\",\r\n      darkgray: \"169 169 169\",\r\n      darkgrey: \"169 169 169\",\r\n      darkgreen: \"0 100 0\",\r\n      darkkhaki: \"189 183 107\",\r\n      darkmagenta: \"139 0 139\",\r\n      darkolivegreen: \"85 107 47\",\r\n      darkorange: \"255 140 0\",\r\n      darkorchid: \"153 50 204\",\r\n      darkred: \"139 0 0\",\r\n      darksalmon: \"233 150 122\",\r\n      darkseagreen: \"143 188 143\",\r\n      darkslateblue: \"72 61 139\",\r\n      darkslategray: \"47 79 79\",\r\n      darkslategrey: \"47 79 79\",\r\n      darkturquoise: \"0 206 209\",\r\n      darkviolet: \"148 0 211\",\r\n      deeppink: \"255 20 147\",\r\n      deepskyblue: \"0 191 255\",\r\n      dimgray: \"105 105 105\",\r\n      dimgrey: \"105 105 105\",\r\n      dodgerblue: \"30 144 255\",\r\n      firebrick: \"178 34 34\",\r\n      floralwhite: \"255 250 240\",\r\n      forestgreen: \"34 139 34\",\r\n      fuchsia: \"255 0 255\",\r\n      gainsboro: \"220 220 220\",\r\n      ghostwhite: \"248 248 255\",\r\n      gold: \"255 215 0\",\r\n      goldenrod: \"218 165 32\",\r\n      gray: \"128 128 128\",\r\n      grey: \"128 128 128\",\r\n      green: \"0 128 0\",\r\n      greenyellow: \"173 255 47\",\r\n      honeydew: \"240 255 240\",\r\n      hotpink: \"255 105 180\",\r\n      indianred: \"205 92 92\",\r\n      indigo: \"75 0 130\",\r\n      ivory: \"255 255 240\",\r\n      khaki: \"240 230 140\",\r\n      lavender: \"230 230 250\",\r\n      lavenderblush: \"255 240 245\",\r\n      lawngreen: \"124 252 0\",\r\n      lemonchiffon: \"255 250 205\",\r\n      lightblue: \"173 216 230\",\r\n      lightcoral: \"240 128 128\",\r\n      lightcyan: \"224 255 255\",\r\n      lightgoldenrodyellow: \"250 250 210\",\r\n      lightgray: \"211 211 211\",\r\n      lightgrey: \"211 211 211\",\r\n      lightgreen: \"144 238 144\",\r\n      lightpink: \"255 182 193\",\r\n      lightsalmon: \"255 160 122\",\r\n      lightseagreen: \"32 178 170\",\r\n      lightskyblue: \"135 206 250\",\r\n      lightslategray: \"119 136 153\",\r\n      lightslategrey: \"119 136 153\",\r\n      lightsteelblue: \"176 196 222\",\r\n      lightyellow: \"255 255 224\",\r\n      lime: \"0 255 0\",\r\n      limegreen: \"50 205 50\",\r\n      linen: \"250 240 230\",\r\n      magenta: \"255 0 255\",\r\n      maroon: \"128 0 0\",\r\n      mediumaquamarine: \"102 205 170\",\r\n      mediumblue: \"0 0 205\",\r\n      mediumorchid: \"186 85 211\",\r\n      mediumpurple: \"147 112 216\",\r\n      mediumseagreen: \"60 179 113\",\r\n      mediumslateblue: \"123 104 238\",\r\n      mediumspringgreen: \"0 250 154\",\r\n      mediumturquoise: \"72 209 204\",\r\n      mediumvioletred: \"199 21 133\",\r\n      midnightblue: \"25 25 112\",\r\n      mintcream: \"245 255 250\",\r\n      mistyrose: \"255 228 225\",\r\n      moccasin: \"255 228 181\",\r\n      navajowhite: \"255 222 173\",\r\n      navy: \"0 0 128\",\r\n      oldlace: \"253 245 230\",\r\n      olive: \"128 128 0\",\r\n      olivedrab: \"107 142 35\",\r\n      orange: \"255 165 0\",\r\n      orangered: \"255 69 0\",\r\n      orchid: \"218 112 214\",\r\n      palegoldenrod: \"238 232 170\",\r\n      palegreen: \"152 251 152\",\r\n      paleturquoise: \"175 238 238\",\r\n      palevioletred: \"216 112 147\",\r\n      papayawhip: \"255 239 213\",\r\n      peachpuff: \"255 218 185\",\r\n      peru: \"205 133 63\",\r\n      pink: \"255 192 203\",\r\n      plum: \"221 160 221\",\r\n      powderblue: \"176 224 230\",\r\n      purple: \"128 0 128\",\r\n      red: \"255 0 0\",\r\n      rosybrown: \"188 143 143\",\r\n      royalblue: \"65 105 225\",\r\n      saddlebrown: \"139 69 19\",\r\n      salmon: \"250 128 114\",\r\n      sandybrown: \"244 164 96\",\r\n      seagreen: \"46 139 87\",\r\n      seashell: \"255 245 238\",\r\n      sienna: \"160 82 45\",\r\n      silver: \"192 192 192\",\r\n      skyblue: \"135 206 235\",\r\n      slateblue: \"106 90 205\",\r\n      slategray: \"112 128 144\",\r\n      slategrey: \"112 128 144\",\r\n      snow: \"255 250 250\",\r\n      springgreen: \"0 255 127\",\r\n      steelblue: \"70 130 180\",\r\n      tan: \"210 180 140\",\r\n      teal: \"0 128 128\",\r\n      thistle: \"216 191 216\",\r\n      tomato: \"255 99 71\",\r\n      turquoise: \"64 224 208\",\r\n      violet: \"238 130 238\",\r\n      wheat: \"245 222 179\",\r\n      white: \"255 255 255\",\r\n      whitesmoke: \"245 245 245\",\r\n      yellow: \"255 255 0\",\r\n      yellowgreen: \"154 205 50\",\r\n    }[color];\r\n  },\r\n};\r\n","import { YKColorParser } from \"./yk-color-parser\";\r\n\r\n/**\r\n * Color\r\n */\r\nexport class YKColor {\r\n  a: number\r\n  hsv: {h: number, s: number, v: number}\r\n  rgb: {r: number, g: number, b: number}\r\n  hsl: {h: number, s: number, l: number}\r\n  hex: string\r\n\r\n  constructor(h: number, s: number, v: number, a: number) {\r\n    this.a = a;\r\n    this.hsv = { h, s, v };\r\n    this.rgb = this.toRGB();\r\n    this.hsl = this.toHSL();\r\n    this.hex = this.toHEX();\r\n  }\r\n\r\n  toRGB() {\r\n    let { h, s, v } = this.hsv;\r\n\r\n    h /= 360;\r\n    s /= 100;\r\n    v /= 100;\r\n\r\n    let r = 0, g = 0, b = 0, i, f, p, q, t;\r\n    i = Math.floor(h * 6);\r\n    f = h * 6 - i;\r\n    p = v * (1 - s);\r\n    q = v * (1 - f * s);\r\n    t = v * (1 - (1 - f) * s);\r\n    switch (i % 6) {\r\n      case 0:\r\n        (r = v), (g = t), (b = p);\r\n        break;\r\n      case 1:\r\n        (r = q), (g = v), (b = p);\r\n        break;\r\n      case 2:\r\n        (r = p), (g = v), (b = t);\r\n        break;\r\n      case 3:\r\n        (r = p), (g = q), (b = v);\r\n        break;\r\n      case 4:\r\n        (r = t), (g = p), (b = v);\r\n        break;\r\n      case 5:\r\n        (r = v), (g = p), (b = q);\r\n        break;\r\n    }\r\n    return {\r\n      r: Math.round(r * 255),\r\n      g: Math.round(g * 255),\r\n      b: Math.round(b * 255),\r\n    };\r\n  }\r\n\r\n  toHSL() {\r\n    let { h, s, v } = this.hsv;\r\n    let _saturation = s * 0.01;\r\n    let _value = v * 0.01;\r\n\r\n    let _lightness = _value - (_value * _saturation) / 2;\r\n    let _saturate = NaN;\r\n\r\n    if (_lightness == 0 || _lightness == 1) {\r\n      _saturate = 0;\r\n    } else {\r\n      _saturate =\r\n        ((_value - _lightness) / Math.min(_lightness, 1 - _lightness)) * 100;\r\n    }\r\n\r\n    let l = _lightness * 100;\r\n    s = _saturate;\r\n\r\n    return {\r\n      h,\r\n      s: s,\r\n      l: l,\r\n    };\r\n  }\r\n\r\n  toHEX() {\r\n    let { r, g, b } = this.toRGB();\r\n    return YKColorParser.RGBAtoHEX(r, g, b, this.a);\r\n  }\r\n}\r\n","import \"./style.css\";\r\n\r\nimport { YKColor } from \"./yk-color\";\r\nimport { YKColorParser } from \"./yk-color-parser\";\r\nimport { hexPad2, createElement, attachEvent } from \"./utility\";\r\n\r\ntype Point = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\nexport enum YKColorPickerPosition {\r\n  TOP = \"t\",\r\n  BOTTOM = \"b\",\r\n  LEFT = \"l\",\r\n  RIGHT = \"r\",\r\n}\r\n\r\nexport type YKColorPickerPositionFallback =\r\n  | \"btrl\"\r\n  | \"btlr\"\r\n  | \"brtl\"\r\n  | \"brlt\"\r\n  | \"bltr\"\r\n  | \"blrt\"\r\n  | \"tbrl\"\r\n  | \"tblr\"\r\n  | \"trbl\"\r\n  | \"trlb\"\r\n  | \"tlbr\"\r\n  | \"tlrb\"\r\n  | \"rbtl\"\r\n  | \"rblt\"\r\n  | \"rtbl\"\r\n  | \"rtlb\"\r\n  | \"rlbt\"\r\n  | \"rltb\"\r\n  | \"lbtr\"\r\n  | \"lbrt\"\r\n  | \"ltbr\"\r\n  | \"ltrb\"\r\n  | \"lrbt\"\r\n  | \"lrtb\";\r\n\r\nexport enum YKColorPickerMode {\r\n  RGB = \"rgb\",\r\n  HSV = \"hsv\",\r\n  HSL = \"hsl\",\r\n  HEX = \"hex\",\r\n}\r\n\r\nexport interface YKColorPickerOptions {\r\n  target: HTMLElement | undefined;\r\n  container: HTMLElement | string | undefined;\r\n  position?: YKColorPickerPosition;\r\n  positionFallback?: YKColorPickerPositionFallback;\r\n  representation?: YKColorPickerMode;\r\n  color?: string;\r\n  closeOnScroll?: boolean;\r\n  closeOnResize?: boolean;\r\n  theme?: string;\r\n  onInit?: (instance: YKColorPicker) => void;\r\n  onOpen?: (instance: YKColorPicker) => void;\r\n  onClose?: (instance: YKColorPicker) => void;\r\n  onInput?: (instance: YKColorPicker) => void;\r\n  onChange?: (instance: YKColorPicker) => void;\r\n  onCopy?: (instance: YKColorPicker) => void;\r\n  onRepresentationChange?: (instance: YKColorPicker) => void;\r\n  onContainerChange?: (\r\n    instance: YKColorPicker,\r\n    previousParent: HTMLElement\r\n  ) => void;\r\n}\r\n\r\ninterface __YKColorPickerOptions extends Required<YKColorPickerOptions> {}\r\n\r\n/**\r\n * Color Picker\r\n */\r\nexport class YKColorPicker {\r\n  static DEFAULT_OPTIONS: __YKColorPickerOptions = {\r\n    target: undefined,\r\n    container: undefined,\r\n    position: YKColorPickerPosition.BOTTOM,\r\n    positionFallback: \"btrl\",\r\n    representation: YKColorPickerMode.RGB,\r\n    color: \"red\",\r\n    closeOnScroll: true,\r\n    closeOnResize: false,\r\n    theme: \"light\",\r\n    onInit: () => {},\r\n    onOpen: () => {},\r\n    onClose: () => {},\r\n    onInput: () => {},\r\n    onChange: () => {},\r\n    onCopy: () => {},\r\n    onRepresentationChange: () => {},\r\n    onContainerChange: () => {},\r\n  };\r\n\r\n  private _isOpen: boolean = false;\r\n  private _options: __YKColorPickerOptions = YKColorPicker.DEFAULT_OPTIONS;\r\n  private _color: any = null;\r\n  private _dom: any = {};\r\n  private _currentRepresentation: any;\r\n  private _dc: any;\r\n  private _onClickTargetBind: any;\r\n  private _onMouseDownCursorBind: any;\r\n  private _onMouseUpHueSliderBind: any;\r\n  private _onMouseMoveHueSliderBind: any;\r\n  private _onMouseDownHueSliderBind: any;\r\n  private _onMouseDownOpacitySliderBind: any;\r\n  private _onMouseUpOpacitySliderBind: any;\r\n  private _onMouseMoveOpacitySliderBind: any;\r\n  private _onResizeScrollWindowBind: any;\r\n  private _onClickCloseBind: any;\r\n  private _onKeyUpCloseBind: any;\r\n  private _onMouseMoveCursorBind: any;\r\n  private _onMouseUpCursorBind: any;\r\n  private _copyTimeout: any = null;\r\n  private _prevColor: any = null;\r\n\r\n  constructor(options: YKColorPickerOptions) {\r\n    this._options = YKColorPicker._buildOptions(\r\n      YKColorPicker.DEFAULT_OPTIONS,\r\n      options\r\n    );\r\n\r\n    const { target, representation } = this._options;\r\n\r\n    this._dom[\"target\"] = target;\r\n    this._currentRepresentation = representation;\r\n\r\n    // init click and enter key to target\r\n    if (target) {\r\n      this._onClickTargetBind = this._onClickTarget.bind(this);\r\n      attachEvent(target, \"click\", this._onClickTargetBind);\r\n    }\r\n\r\n    this.setColor(this._options.color);\r\n    this._prevColor = this.getHEX();\r\n    this._initDOM();\r\n  }\r\n\r\n  isOpen() {\r\n    return this._isOpen;\r\n  }\r\n\r\n  open() {\r\n    this._prevColor = this.getHEX();\r\n    if (this._options.container) {\r\n      this._attachToContainer(true);\r\n    } else {\r\n      this._attachToBody();\r\n    }\r\n    this._options.onOpen && this._options.onOpen(this);\r\n  }\r\n\r\n  close() {\r\n    if (!this._dc) {\r\n      if (this._prevColor != this.getHEX()) {\r\n        this._options.onChange && this._options.onChange(this);\r\n      }\r\n      this._detachOverlay();\r\n      this._options.onClose && this._options.onClose(this);\r\n    }\r\n    this._dc = false;\r\n  }\r\n\r\n  getRGB() {\r\n    return { ...this._color.toRGB(), a: this._color.a };\r\n  }\r\n\r\n  getHSV() {\r\n    const { h, s, v } = this._color.hsv;\r\n    return {\r\n      h: Math.round(h),\r\n      s: Math.round(s),\r\n      v: Math.round(v),\r\n      a: this._color.a,\r\n    };\r\n  }\r\n\r\n  getHSL() {\r\n    const { h, s, l } = this._color.toHSL();\r\n    return {\r\n      h: Math.round(h),\r\n      s: Math.round(s),\r\n      l: Math.round(l),\r\n      a: this._color.a,\r\n    };\r\n  }\r\n\r\n  getHEX() {\r\n    return this._color.toHEX();\r\n  }\r\n\r\n  updateOptions(options: YKColorPickerOptions) {\r\n    const _options = YKColorPicker._buildOptions(this._options, options);\r\n    this._options = _options;\r\n    const { target, representation } = this._options;\r\n\r\n    // update representation\r\n    if (representation && this._currentRepresentation != representation) {\r\n      this._updateRepresentation(representation);\r\n    }\r\n\r\n    // update target\r\n    if (this._dom.target != target) {\r\n      if (this._dom.target != null) {\r\n        this._dom.target.removeEventListener(\"click\", this._onClickTargetBind);\r\n      }\r\n      this._dom.target = target;\r\n      if (this._dom.target != null) {\r\n        this._dom.attachEvent(target, \"click\", this._onClickTargetBind);\r\n      }\r\n    }\r\n\r\n    if (this._isOpen) {\r\n      if (this._options.container) {\r\n        this._attachToContainer(true);\r\n      } else {\r\n        this._attachToBody();\r\n      }\r\n    }\r\n  }\r\n\r\n  getColor() {\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB: {\r\n        const { r, g, b } = this._color.rgb;\r\n        return {\r\n          r: Math.round(r),\r\n          g: Math.round(g),\r\n          b: Math.round(b),\r\n          a: this._color.a,\r\n        };\r\n      }\r\n\r\n      case YKColorPickerMode.HSV: {\r\n        const { h, s, v } = this._color.hsv;\r\n        return {\r\n          h: Math.round(h),\r\n          s: Math.round(s),\r\n          l: Math.round(v),\r\n          a: this._color.a,\r\n        };\r\n      }\r\n\r\n      case YKColorPickerMode.HSL: {\r\n        const { h, s, l } = this._color.hsl;\r\n        return {\r\n          h: Math.round(h),\r\n          s: Math.round(s),\r\n          l: Math.round(l),\r\n          a: this._color.a,\r\n        };\r\n      }\r\n\r\n      case YKColorPickerMode.HEX:\r\n        return this.getHEX();\r\n    }\r\n  }\r\n\r\n  setColor(value: string) {\r\n    const { h, s, v, a } = YKColorParser.parse(value);\r\n    this._color = new YKColor(h, s, v, a);\r\n  }\r\n\r\n  private _initDOM() {\r\n    // #dom declaration\r\n    const cp_overlayWrapper = createElement(\"div\", [\"yk-overlay-wrapper\"]);\r\n    const cp_Wrapper = createElement(\"div\", [\"yk-wrapper\"]);\r\n\r\n    // Append child nodes\r\n    cp_overlayWrapper.appendChild(cp_Wrapper);\r\n    // build palette\r\n    cp_Wrapper.appendChild(this._buildPaletteColor());\r\n    // build color settings\r\n    cp_Wrapper.appendChild(this._buildColorSettings());\r\n\r\n    attachEvent(cp_overlayWrapper, \"click\", (event: MouseEvent) =>\r\n      event.stopPropagation()\r\n    );\r\n    this._dom[\"overlayWrapper\"] = cp_overlayWrapper;\r\n\r\n    this._onKeyUpCloseBind = this._onKeyUpClose.bind(this);\r\n    this._onResizeScrollWindowBind = this._onResizeScrollWindow.bind(this);\r\n    this._onClickCloseBind = this.close.bind(this);\r\n\r\n    if (this._options.container) {\r\n      this._attachToContainer(false);\r\n    } else {\r\n      document.body.appendChild(this._dom.overlayWrapper);\r\n    }\r\n\r\n    this._options.onInit && this._options.onInit(this);\r\n  }\r\n\r\n  private _updateGUI() {\r\n    this._updateCursorThumb();\r\n    this._updateInputs();\r\n    this._updateColorPreview(false);\r\n    this._updateHueThumb();\r\n    this._updateOpacityThumb();\r\n  }\r\n\r\n  private _buildPaletteColor() {\r\n    const paletteWrapper = createElement(\"div\", [\"yk-palette-wrapper\"]);\r\n    const palette = createElement(\"div\", [\"yk-palette\"]);\r\n    const cursor = createElement(\"div\", [\"yk-cursor\"]);\r\n\r\n    paletteWrapper.appendChild(palette);\r\n    paletteWrapper.appendChild(cursor);\r\n\r\n    // Append event\r\n    this._onMouseDownCursorBind = this._onMouseDownCursor.bind(this);\r\n    this._onMouseUpCursorBind = this._onMouseUpCursor.bind(this);\r\n    this._onMouseMoveCursorBind = this._onMouseMoveCursor.bind(this);\r\n    attachEvent(paletteWrapper, \"pointerdown\", this._onMouseDownCursorBind);\r\n\r\n    this._dom[\"palette\"] = palette;\r\n    this._dom[\"cursor\"] = cursor;\r\n\r\n    return paletteWrapper;\r\n  }\r\n\r\n  private _buildColorSettings() {\r\n    const colorSettings = createElement(\"div\", [\"yk-color-settings\"]);\r\n\r\n    // Build color color\r\n    colorSettings.appendChild(this._buildCopyColor());\r\n    // Build color preview\r\n    colorSettings.appendChild(this._buildColorPreview());\r\n    // Build sliders\r\n    colorSettings.appendChild(this._buildColorSliders());\r\n    // Build inputs\r\n    colorSettings.appendChild(this._buildColorInputs());\r\n\r\n    return colorSettings;\r\n  }\r\n\r\n  private _buildColorInputs() {\r\n    // Create elements\r\n    const inputsSettings = createElement(\"div\", [\"yk-color-model-wrapper\"]);\r\n    const inputsWrapper = createElement(\"div\", [\"yk-color-model\"]);\r\n    const btnSwitch = createElement(\"button\", [\"yk-color-model-switch\"], {\r\n      type: \"button\",\r\n    });\r\n    btnSwitch.appendChild(\r\n      this._createSVGIcon(\r\n        `<path d=\"m3.5045 11.431 1.5786-1.5786 3.0256 3.0256 3.0256-3.0256 1.5786 1.5786-4.6042 4.4726zm4.6042-11.313 4.6042 4.4726-1.5786 1.5786-3.0256-3.0256-3.0256 3.0256-1.5786-1.5786z\"/>`\r\n      )\r\n    );\r\n\r\n    // Append elements\r\n    inputsSettings.appendChild(inputsWrapper);\r\n    inputsSettings.appendChild(btnSwitch);\r\n\r\n    // Attach Events\r\n    attachEvent(btnSwitch, \"click\", this._onClickInputsSwitch.bind(this));\r\n\r\n    this._dom[\"btnSwitch\"] = btnSwitch;\r\n    this._dom[\"inputsWrapper\"] = inputsWrapper;\r\n\r\n    return inputsSettings;\r\n  }\r\n\r\n  private _buildInput() {\r\n    const { inputsWrapper } = this._dom;\r\n    inputsWrapper.innerHTML = \"\";\r\n    if (this._currentRepresentation == YKColorPickerMode.HEX) {\r\n      inputsWrapper.appendChild(this._buildHEXInput());\r\n    } else {\r\n      inputsWrapper.appendChild(this._buildQuadrupedInput());\r\n    }\r\n  }\r\n\r\n  private _buildHEXInput() {\r\n    const inputWrapper = createElement(\"div\", [\"yk-hex-input\"]);\r\n    const inputHEX = createElement(\"input\", [\"yk-color-input\"]);\r\n    const labelHEX = createElement(\"label\", [\"yk-color-model-label\"]);\r\n    inputHEX.setAttribute(\"type\", \"text\");\r\n    labelHEX.textContent = \"HEX\";\r\n    inputWrapper.appendChild(inputHEX);\r\n    inputWrapper.appendChild(labelHEX);\r\n\r\n    attachEvent(inputHEX, \"focus\", this._onFocusInput.bind(this));\r\n    attachEvent(inputHEX, \"keydown\", this._onKeyDownInputHEX.bind(this));\r\n    attachEvent(inputHEX, \"input\", this._onInputHEX.bind(this));\r\n    attachEvent(inputHEX, \"change\", this._onChangeInputHEX.bind(this));\r\n\r\n    this._dom[\"inputHEX\"] = inputHEX;\r\n\r\n    return inputWrapper;\r\n  }\r\n\r\n  private _buildQuadrupedInput() {\r\n    // Create #dom elements\r\n    const inputWrapper = createElement(\"div\", [\"yk-input-wrapper\"]);\r\n    const inputA = createElement(\"input\", [\"yk-color-input\"], {\r\n      type: \"text\",\r\n      inputmode: \"numeric\",\r\n    });\r\n    const inputB = createElement(\"input\", [\"yk-color-input\"], {\r\n      type: \"text\",\r\n      inputmode: \"numeric\",\r\n    });\r\n    const inputC = createElement(\"input\", [\"yk-color-input\"], {\r\n      type: \"text\",\r\n      inputmode: \"numeric\",\r\n    });\r\n    const inputD = createElement(\"input\", [\"yk-color-input\"], {\r\n      type: \"text\",\r\n      inputmode: \"numeric\",\r\n    });\r\n    const labelA = createElement(\"label\", [\"yk-color-model-label\"]);\r\n    const labelB = createElement(\"label\", [\"yk-color-model-label\"]);\r\n    const labelC = createElement(\"label\", [\"yk-color-model-label\"]);\r\n    const labelD = createElement(\"label\", [\"yk-color-model-label\"]);\r\n\r\n    // Set labels' text\r\n    const model = this._currentRepresentation.toUpperCase();\r\n    labelA.textContent = model[0];\r\n    labelB.textContent = model[1];\r\n    labelC.textContent = model[2];\r\n    labelD.textContent = \"A\";\r\n\r\n    // Append child elements\r\n    inputWrapper.appendChild(inputA);\r\n    inputWrapper.appendChild(inputB);\r\n    inputWrapper.appendChild(inputC);\r\n    inputWrapper.appendChild(inputD);\r\n    inputWrapper.appendChild(labelA);\r\n    inputWrapper.appendChild(labelB);\r\n    inputWrapper.appendChild(labelC);\r\n    inputWrapper.appendChild(labelD);\r\n\r\n    // Attach events\r\n    attachEvent(inputA, \"focus\", this._onFocusInput.bind(this));\r\n    attachEvent(inputA, \"keydown\", this._onKeyDownInputA.bind(this));\r\n    attachEvent(inputA, \"input\", this._onInputA.bind(this));\r\n    attachEvent(inputA, \"change\", this._onChangeInputA.bind(this));\r\n\r\n    attachEvent(inputB, \"focus\", this._onFocusInput.bind(this));\r\n    attachEvent(inputB, \"keydown\", this._onKeyDownInputB.bind(this));\r\n    attachEvent(inputB, \"input\", this._onInputB.bind(this));\r\n    attachEvent(inputB, \"change\", this._onChangeInputB.bind(this));\r\n\r\n    attachEvent(inputC, \"focus\", this._onFocusInput.bind(this));\r\n    attachEvent(inputC, \"keydown\", this._onKeyDownInputC.bind(this));\r\n    attachEvent(inputC, \"input\", this._onInputC.bind(this));\r\n    attachEvent(inputC, \"change\", this._onChangeInputC.bind(this));\r\n\r\n    attachEvent(inputD, \"keydown\", this._onKeyDownAlphaInput.bind(this));\r\n    attachEvent(inputD, \"input\", this._onKeyUpAlphaInput.bind(this));\r\n    attachEvent(inputD, \"change\", this._onChangeAlphaInput.bind(this));\r\n\r\n    this._dom[\"inputA\"] = inputA;\r\n    this._dom[\"inputB\"] = inputB;\r\n    this._dom[\"inputC\"] = inputC;\r\n    this._dom[\"inputAlpha\"] = inputD;\r\n\r\n    return inputWrapper;\r\n  }\r\n\r\n  private _updateOpacityThumb() {\r\n    const { opacitySlider, opacityThumb } = this._dom;\r\n    opacityThumb.style.translate = `${\r\n      this._color.a * opacitySlider.offsetWidth\r\n    }px`;\r\n  }\r\n\r\n  private _updateHueThumb() {\r\n    const { hueThumb, hueSlider } = this._dom;\r\n    hueThumb.style.translate = `${\r\n      (this._color.hsv.h / 360) * hueSlider.offsetWidth\r\n    }px`;\r\n  }\r\n\r\n  private _setQuadrupedValue(a: string, b: string, c: string) {\r\n    this._dom[\"inputA\"].value = a;\r\n    this._dom[\"inputB\"].value = b;\r\n    this._dom[\"inputC\"].value = c;\r\n    this._dom[\"inputAlpha\"].value = parseFloat(this._color.a.toFixed(2));\r\n  }\r\n\r\n  private _updateHEXInput() {\r\n    this._dom[\"inputHEX\"].value = this._color.hex;\r\n  }\r\n\r\n  private _updateSettingsView() {\r\n    this._updateInputsValue();\r\n    this._updateColorPreview(true);\r\n  }\r\n\r\n  private _updateInputs() {\r\n    this._buildInput();\r\n    this._updateInputsValue();\r\n  }\r\n\r\n  private _updateInputsValue() {\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB:\r\n        {\r\n          const { r, g, b } = (this._color.rgb = this._color.toRGB());\r\n          this._setQuadrupedValue(\r\n            Math.round(r).toString(),\r\n            Math.round(g).toString(),\r\n            Math.round(b).toString()\r\n          );\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HSV:\r\n        {\r\n          const { h, s, v } = this._color.hsv;\r\n          this._setQuadrupedValue(\r\n            `${Math.round(h)}°`,\r\n            `${Math.round(s)}%`,\r\n            `${Math.round(v)}%`\r\n          );\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HSL:\r\n        {\r\n          const { h, s, l } = (this._color.hsl = this._color.toHSL());\r\n          this._setQuadrupedValue(\r\n            `${Math.round(h)}°`,\r\n            `${Math.round(s)}%`,\r\n            `${Math.round(l)}%`\r\n          );\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HEX:\r\n        {\r\n          this._updateHEXColor();\r\n          this._updateHEXInput();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _updateColorPreview(fireEvent: boolean) {\r\n    const alpha = this._color.a;\r\n    const hsl = this._color.toHSL();\r\n    const { palette, opacitySlider, colorPreview } = this._dom;\r\n    const paletteBGColor = `hsl(${hsl.h}deg 100% 50% / 1)`;\r\n    palette.style.backgroundImage = `linear-gradient(180deg, transparent 0%, rgba(0,0,0,1) 100%), linear-gradient(90deg, rgba(255,255,255,1) 0%, ${paletteBGColor} 100%)`;\r\n    const hslColor = `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;\r\n    opacitySlider.style.setProperty(\r\n      \"background-image\",\r\n      `linear-gradient(90deg, transparent, ${hslColor})`\r\n    );\r\n    colorPreview.setAttribute(\"fill\", hslColor);\r\n    colorPreview.setAttribute(\"fill-opacity\", alpha);\r\n    if (fireEvent == true) {\r\n      this._options.onInput(this);\r\n    }\r\n  }\r\n\r\n  private _updateCursorThumb() {\r\n    const { palette, cursor } = this._dom;\r\n    const { s, v } = this._color.hsv;\r\n    cursor.style.translate = `${(s / 100) * palette.offsetWidth}px ${\r\n      palette.offsetHeight - (v / 100) * palette.offsetHeight\r\n    }px`;\r\n  }\r\n\r\n  private _buildCopyColor() {\r\n    const copyColor = createElement(\"button\", [\"yk-clipboard-color\"], {\r\n      type: \"button\",\r\n    });\r\n    attachEvent(copyColor, \"click\", this._onClickCopyColor.bind(this));\r\n    this._dom[\"copyColor\"] = copyColor;\r\n    this._attachCopyIcon();\r\n\r\n    return copyColor;\r\n  }\r\n\r\n  private _attachCopyIcon() {\r\n    const path = `<path d=\"m1.9695 11.037v-6.7c0-2 1.6-3.7 3.7-3.7h4.3c0.8 0 1.5 0.5 1.7 1.2h-5.6c-1.6 0.1-2.9 1.4-2.9 3.1v7.9c-0.7-0.3-1.2-1-1.2-1.8zm4.3 4.3c-1 0-1.8-0.8-1.8-1.8v-8.6c0-1 0.8-1.8 1.8-1.8h6.1c1 0 1.8 0.8 1.8 1.8v8.6c0 1-0.8 1.8-1.8 1.8zm6.7-1.8v-8.6c0-0.3-0.3-0.6-0.6-0.6h-6.1c-0.3 0-0.6 0.3-0.6 0.6v8.6c0 0.3 0.3 0.6 0.6 0.6h6.1c0.3 0 0.6-0.3 0.6-0.6z\"/>`;\r\n    this._dom.copyColor.innerHTML = \"\";\r\n    this._dom.copyColor.appendChild(this._createSVGIcon(path));\r\n  }\r\n\r\n  private _attachCheckIcon() {\r\n    const path = `<path d=\"m13.975 5.3001c0.24929-0.24929 0.16619-0.58168-0.0831-0.83097l-0.66477-0.66477c-0.24929-0.24929-0.58168-0.16619-0.83097 0.083097l-5.5675 6.2322-3.407-3.1577c-0.24929-0.24929-0.58168-0.16619-0.83097 0.083097l-0.66477 0.66477c-0.24929 0.24929-0.16619 0.58168 0.083097 0.83097l4.5703 4.1548c0.24929 0.24929 0.58168 0.16619 0.83097-0.0831z\"/>`;\r\n    this._dom.copyColor.innerHTML = \"\";\r\n    this._dom.copyColor.appendChild(this._createSVGIcon(path));\r\n  }\r\n\r\n  private _createSVGIcon(path: string) {\r\n    const svgElement = document.createElementNS(\r\n      \"http://www.w3.org/2000/svg\",\r\n      \"svg\"\r\n    );\r\n    svgElement.setAttribute(\"viewBox\", \"0 0 16 16\");\r\n    svgElement.setAttribute(\"width\", \"16px\");\r\n    svgElement.setAttribute(\"height\", \"16px\");\r\n    svgElement.innerHTML = path;\r\n\r\n    return svgElement;\r\n  }\r\n\r\n  private _buildColorSliders() {\r\n    const sliders = createElement(\"div\", [\"yk-sliders\"]);\r\n\r\n    // Build hue slider\r\n    sliders.appendChild(this._buildHueSlider());\r\n    // Build hue slider\r\n    sliders.appendChild(this._buildOpacitySlider());\r\n\r\n    return sliders;\r\n  }\r\n\r\n  private _buildHueSlider() {\r\n    // Create elements\r\n    const sliderWrapper = createElement(\"div\", [\"yk-hue-slider-wrapper\"]);\r\n    const slider = createElement(\"div\", [\"yk-hue-slider\"]);\r\n    const sliderThumb = createElement(\"a\", [\"yk-hue-slider-thumb\"]);\r\n    sliderThumb.setAttribute(\"tabindex\", \"0\");\r\n\r\n    // Appench child element\r\n    sliderWrapper.appendChild(slider);\r\n    sliderWrapper.appendChild(sliderThumb);\r\n\r\n    // Attach events\r\n    this._onMouseDownHueSliderBind = this._onMouseDownHueSlider.bind(this);\r\n    this._onMouseUpHueSliderBind = this._onMouseUpHueSlider.bind(this);\r\n    this._onMouseMoveHueSliderBind = this._onMouseMoveHueSlider.bind(this);\r\n    attachEvent(sliderWrapper, \"pointerdown\", this._onMouseDownHueSliderBind);\r\n    attachEvent(sliderThumb, \"keydown\", this._onKeyDownHueSlider.bind(this));\r\n\r\n    this._dom[\"hueSlider\"] = slider;\r\n    this._dom[\"hueThumb\"] = sliderThumb;\r\n\r\n    return sliderWrapper;\r\n  }\r\n\r\n  private _buildOpacitySlider() {\r\n    // Create elements\r\n    const sliderWrapper = createElement(\"div\", [\"yk-opacity-slider-wrapper\"]);\r\n    const color = createElement(\"div\", [\"yk-opacity-color\"]);\r\n    const sliderThumb = createElement(\"a\", [\"yk-opacity-slider-thumb\"]);\r\n    sliderThumb.setAttribute(\"tabindex\", \"0\");\r\n\r\n    // Appench child element\r\n    sliderWrapper.appendChild(color);\r\n    sliderWrapper.appendChild(sliderThumb);\r\n\r\n    // Attach events\r\n    this._onMouseDownOpacitySliderBind =\r\n      this._onMouseDownOpacitySlider.bind(this);\r\n    this._onMouseUpOpacitySliderBind = this._onMouseUpOpacitySlider.bind(this);\r\n    this._onMouseMoveOpacitySliderBind =\r\n      this._onMouseMoveOpacitySlider.bind(this);\r\n    attachEvent(\r\n      sliderWrapper,\r\n      \"pointerdown\",\r\n      this._onMouseDownOpacitySliderBind\r\n    );\r\n    attachEvent(\r\n      sliderThumb,\r\n      \"keydown\",\r\n      this._onKeyDownOpacitySlider.bind(this)\r\n    );\r\n\r\n    this._dom[\"opacitySlider\"] = color;\r\n    this._dom[\"opacityThumb\"] = sliderThumb;\r\n\r\n    return sliderWrapper;\r\n  }\r\n\r\n  private _buildColorPreview() {\r\n    const colorPreviewWrapper = createElement(\"span\", [\r\n      \"yk-color-preview-wrapper\",\r\n    ]);\r\n\r\n    const svgElement = document.createElementNS(\r\n      \"http://www.w3.org/2000/svg\",\r\n      \"svg\"\r\n    );\r\n    svgElement.setAttribute(\"width\", \"38\");\r\n    svgElement.setAttribute(\"height\", \"38\");\r\n\r\n    const colorPreview = document.createElementNS(\r\n      \"http://www.w3.org/2000/svg\",\r\n      \"circle\"\r\n    );\r\n    colorPreview.setAttribute(\"cx\", \"19\");\r\n    colorPreview.setAttribute(\"cy\", \"19\");\r\n    colorPreview.setAttribute(\"r\", \"18\");\r\n    colorPreview.classList.add(\"yk-preview-stroke\");\r\n\r\n    svgElement.innerHTML =\r\n      '<pattern id=\"transparent-grid\" x=\"0\" y=\"0\" width=\"6\" height=\"6\" patternUnits=\"userSpaceOnUse\"><path fill=\"#DBDBDB\" d=\"M0 0h3v3H0z\"/><path fill=\"#fff\" d=\"M3 0h3v3H3z\"/><path fill=\"#DBDBDB\" d=\"M3 3h3v3H3z\"/><path fill=\"#fff\" d=\"M0 3h3v3H0z\"/></pattern></defs><circle cx=\"19\" cy=\"19\" r=\"18\" fill=\"url(#transparent-grid)\"/>';\r\n    svgElement.appendChild(colorPreview);\r\n    colorPreviewWrapper.appendChild(svgElement);\r\n\r\n    this._dom.colorPreview = colorPreview;\r\n\r\n    return colorPreviewWrapper;\r\n  }\r\n\r\n  private _rgbUpdateView() {\r\n    this._updateColorPreview(true);\r\n    this._updateHueThumb();\r\n    this._updateCursorThumb();\r\n  }\r\n\r\n  private _updateHEXColorSection(\r\n    color: string,\r\n    event: Event,\r\n    con: (a: number, b: number) => boolean,\r\n    conValue: number,\r\n    op: (a: number, b: number) => number,\r\n    startSelect: number,\r\n    endSelect: number\r\n  ) {\r\n    const target = event.target as HTMLInputElement;\r\n    const { rgb, hex } = this._color;\r\n    if (con(rgb[color], conValue)) {\r\n      rgb[color] = op(rgb[color], 1);\r\n      this._color.hex =\r\n        hex.substring(0, startSelect) +\r\n        hexPad2(Math.round(rgb[color])) +\r\n        hex.substring(endSelect);\r\n      const { r, g, b } = rgb;\r\n      this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n      this._rgbUpdateView();\r\n    }\r\n    target.value = this._color.hex;\r\n    target.setSelectionRange(startSelect, endSelect);\r\n    event.preventDefault();\r\n  }\r\n\r\n  private _updateHEXAlphaSection(\r\n    event: Event,\r\n    con: (a: number, b: number) => boolean,\r\n    conValue: number,\r\n    op: (a: number, b: number) => number\r\n  ) {\r\n    const target = event.target as HTMLInputElement;\r\n    const { hex, a } = this._color;\r\n    if (con(a, conValue)) {\r\n      this._color.a = parseFloat(op(a, 0.01).toFixed(2));\r\n      target.value = this._color.hex =\r\n        hex.substring(0, 7) + hexPad2(Math.round(this._color.a * 255));\r\n      this._updateColorPreview(true);\r\n      this._updateOpacityThumb();\r\n    }\r\n    target.value = this._color.hex;\r\n    target.setSelectionRange(7, 9);\r\n    event.preventDefault();\r\n  }\r\n\r\n  private _updateOpacityValue(value: number) {\r\n    this._color.a = parseFloat(value.toFixed(2));\r\n    if (this._currentRepresentation == YKColorPickerMode.HEX) {\r\n      this._updateHEXColor();\r\n      this._updateHEXInput();\r\n    } else {\r\n      this._dom.inputAlpha.value = this._color.a;\r\n    }\r\n    this._updateColorPreview(true);\r\n  }\r\n\r\n  private _updatePosition() {\r\n    if (this._options.target == null) {\r\n      return;\r\n    }\r\n    if (!YKColorPicker._isTargetInViewport(this._options.target)) {\r\n      this.close();\r\n      return;\r\n    }\r\n    this._setPositionAxis(this._getPositionAxis());\r\n  }\r\n\r\n  private _attachToContainer(callEvent: boolean) {\r\n    if (!this._options.container) {\r\n      throw new Error(\"YKColorPicker:: container is not defined\");\r\n    }\r\n    let _container: HTMLElement | string | null = null;\r\n    if (typeof this._options.container == \"string\") {\r\n      _container = document.getElementById(this._options.container);\r\n    } else {\r\n      _container = this._options.container;\r\n    }\r\n    if (!_container) {\r\n      throw ReferenceError(\r\n        \"ColorPicker:: container to set color picker is undefined\"\r\n      );\r\n    }\r\n    this._removeWindowEvents();\r\n    const { overlayWrapper } = this._dom;\r\n    const parent = overlayWrapper.parentElement;\r\n    _container.appendChild(overlayWrapper);\r\n    overlayWrapper.classList.remove(\r\n      \"yk-overlay-wrapper--light\",\r\n      \"yk-overlay-wrapper--dark\"\r\n    );\r\n    overlayWrapper.classList.add(\"yk-overlay-wrapper--static\");\r\n    overlayWrapper.classList.add(\"yk-overlay-wrapper--open\");\r\n    overlayWrapper.classList.add(\"yk-overlay-wrapper--\" + this._options.theme);\r\n    this._updateGUI();\r\n    this._isOpen = true;\r\n    if (callEvent && parent != overlayWrapper.parentElement) {\r\n      this._options.onContainerChange &&\r\n        this._options.onContainerChange(this, parent);\r\n    }\r\n  }\r\n\r\n  private _attachToBody() {\r\n    this._removeWindowEvents();\r\n    const { overlayWrapper } = this._dom;\r\n    const parent = overlayWrapper.parentElement;\r\n    document.body.appendChild(overlayWrapper);\r\n    overlayWrapper.classList.remove(\r\n      \"yk-overlay-wrapper--light\",\r\n      \"yk-overlay-wrapper--dark\"\r\n    );\r\n    overlayWrapper.classList.remove(\"yk-overlay-wrapper--static\");\r\n    overlayWrapper.classList.add(\"yk-overlay-wrapper--open\");\r\n    overlayWrapper.classList.add(\"yk-overlay-wrapper--\" + this._options.theme);\r\n    this._updateGUI();\r\n    this._updatePosition();\r\n    attachEvent(window, \"resize\", this._onResizeScrollWindowBind);\r\n    attachEvent(window, \"scroll\", this._onResizeScrollWindowBind);\r\n    attachEvent(document, \"click\", this._onClickCloseBind);\r\n    attachEvent(document, \"keyup\", this._onKeyUpCloseBind);\r\n    this._isOpen = true;\r\n    if (parent != overlayWrapper.parentElement) {\r\n      this._options.onContainerChange &&\r\n        this._options.onContainerChange(this, parent);\r\n    }\r\n  }\r\n\r\n  private _detachOverlay() {\r\n    this._dom.overlayWrapper.classList.remove(\"yk-overlay-wrapper--open\");\r\n    this._removeWindowEvents();\r\n    this._isOpen = false;\r\n  }\r\n\r\n  private _onClickTarget(event: MouseEvent) {\r\n    event.stopPropagation();\r\n    if (this._isOpen) this.close();\r\n    else this.open();\r\n  }\r\n\r\n  private _onMouseDownCursor(event: MouseEvent) {\r\n    this._dc = true;\r\n    attachEvent(document, \"pointermove\", this._onMouseMoveCursorBind);\r\n    attachEvent(document, \"pointerup\", this._onMouseUpCursorBind);\r\n    this._onMouseMoveCursorBind(event);\r\n  }\r\n\r\n  private _onMouseUpCursor(e: MouseEvent) {\r\n    document.removeEventListener(\"pointermove\", this._onMouseMoveCursorBind);\r\n    document.removeEventListener(\"pointerup\", this._onMouseUpCursorBind);\r\n    if (this._dom.overlayWrapper.contains(e.target)) {\r\n      this._dc = false;\r\n    }\r\n  }\r\n\r\n  private _onMouseMoveCursor(event: MouseEvent) {\r\n    const { x, y } = this._getCursorPosition(event.clientX, event.clientY);\r\n    this._dom.cursor.style.translate = `${x}px ${y}px`;\r\n    const paletteHeight = this._dom.palette.offsetHeight;\r\n    const paletteWidth = this._dom.palette.offsetWidth;\r\n    this._color.hsv.s = (x / paletteWidth) * 100;\r\n    this._color.hsv.v = ((paletteHeight - y) / paletteHeight) * 100;\r\n    this._updateSettingsView();\r\n  }\r\n\r\n  private _onClickInputsSwitch() {\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB:\r\n        this._updateRepresentation(YKColorPickerMode.HSV);\r\n        break;\r\n      case YKColorPickerMode.HSV:\r\n        this._updateRepresentation(YKColorPickerMode.HSL);\r\n        break;\r\n      case YKColorPickerMode.HSL:\r\n        this._updateRepresentation(YKColorPickerMode.HEX);\r\n        break;\r\n      case YKColorPickerMode.HEX:\r\n        this._updateRepresentation(YKColorPickerMode.RGB);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onFocusInput() {\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB:\r\n        this._color.rgb = this.getRGB();\r\n        break;\r\n      case YKColorPickerMode.HSV:\r\n        this._color.hsv = this.getHSV();\r\n        break;\r\n      case YKColorPickerMode.HSL:\r\n        this._color.hsl = this.getHSL();\r\n        break;\r\n      case YKColorPickerMode.HEX:\r\n        this._updateHEXColor();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onKeyDownAlphaInput(event: KeyboardEvent) {\r\n    const target = event.target as HTMLInputElement;\r\n    const { a } = this._color;\r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        {\r\n          if (a < 1) {\r\n            let alphaValue = parseFloat((a + 0.01).toFixed(2));\r\n            if (alphaValue > 1) {\r\n              alphaValue = 1;\r\n            }\r\n            target.value = (this._color.a = alphaValue).toString();\r\n            this._updateColorPreview(true);\r\n            this._updateOpacityThumb();\r\n          }\r\n        }\r\n        break;\r\n\r\n      case \"ArrowDown\":\r\n        {\r\n          if (a > 0) {\r\n            let alphaValue = parseFloat((a - 0.01).toFixed(2));\r\n            if (alphaValue < 0) {\r\n              alphaValue = 0;\r\n            }\r\n            target.value = (this._color.a = alphaValue).toString();\r\n            this._updateColorPreview(true);\r\n            this._updateOpacityThumb();\r\n          }\r\n        }\r\n        break;\r\n\r\n      case \".\":\r\n        {\r\n          if (/(\\.)/.test(target.value)) {\r\n            event.preventDefault();\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onKeyUpAlphaInput(event: KeyboardEvent) {\r\n    const target = event.target as HTMLInputElement;\r\n    if (/^(0(\\.\\d{1,2})?|(0*)1?)$/.test(target.value) || target.value == \"\") {\r\n      const value = parseFloat(target.value) || 0;\r\n      if (!isNaN(value) && value >= 0 && value <= 1) {\r\n        this._color.a = value;\r\n        this._updateColorPreview(true);\r\n        this._updateOpacityThumb();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onChangeAlphaInput(event: Event) {\r\n    event.target && ((event.target as HTMLInputElement).value = this._color.a);\r\n  }\r\n\r\n  private _onKeyDownInputHEX(event: KeyboardEvent) {\r\n    const target = event.target as HTMLInputElement;\r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        {\r\n          if (\r\n            !/^#([0-9a-f]{3}|[0-9a-f]{4}|[0-9a-f]{6}|[0-9a-f]{8})$/i.test(\r\n              target.value\r\n            )\r\n          ) {\r\n            target.value = this._color.hex;\r\n          }\r\n          const caret = this._getCaretPosition(target);\r\n          const length = target.value.length;\r\n          if (length <= 5) {\r\n            if (caret < 2) {\r\n              this._updateHEXColorSection(\r\n                \"r\",\r\n                event,\r\n                YKColorPicker._lt,\r\n                255,\r\n                YKColorPicker._add,\r\n                1,\r\n                3\r\n              );\r\n            } else if (caret < 3) {\r\n              this._updateHEXColorSection(\r\n                \"g\",\r\n                event,\r\n                YKColorPicker._lt,\r\n                255,\r\n                YKColorPicker._add,\r\n                3,\r\n                5\r\n              );\r\n            } else if ((caret <= 4 && length <= 4) || caret < 4) {\r\n              this._updateHEXColorSection(\r\n                \"b\",\r\n                event,\r\n                YKColorPicker._lt,\r\n                255,\r\n                YKColorPicker._add,\r\n                5,\r\n                7\r\n              );\r\n            } else if (caret <= 5) {\r\n              this._updateHEXAlphaSection(\r\n                event,\r\n                YKColorPicker._lt,\r\n                1,\r\n                YKColorPicker._add\r\n              );\r\n            }\r\n          } else {\r\n            if (caret < 3) {\r\n              this._updateHEXColorSection(\r\n                \"r\",\r\n                event,\r\n                YKColorPicker._lt,\r\n                255,\r\n                YKColorPicker._add,\r\n                1,\r\n                3\r\n              );\r\n            } else if (caret < 5) {\r\n              this._updateHEXColorSection(\r\n                \"g\",\r\n                event,\r\n                YKColorPicker._lt,\r\n                255,\r\n                YKColorPicker._add,\r\n                3,\r\n                5\r\n              );\r\n            } else if ((caret <= 7 && length == 7) || caret < 7) {\r\n              this._updateHEXColorSection(\r\n                \"b\",\r\n                event,\r\n                YKColorPicker._lt,\r\n                255,\r\n                YKColorPicker._add,\r\n                5,\r\n                7\r\n              );\r\n            } else if (caret <= 9) {\r\n              this._updateHEXAlphaSection(\r\n                event,\r\n                YKColorPicker._lt,\r\n                1,\r\n                YKColorPicker._add\r\n              );\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        {\r\n          if (\r\n            !/^#([0-9a-f]{3}|[0-9a-f]{4}|[0-9a-f]{6}|[0-9a-f]{8})$/i.test(\r\n              target.value\r\n            )\r\n          ) {\r\n            target.value = this._color.hex;\r\n          }\r\n          const caret = this._getCaretPosition(target);\r\n          const length = target.value.length;\r\n          if (length <= 5) {\r\n            if (caret < 2) {\r\n              this._updateHEXColorSection(\r\n                \"r\",\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub,\r\n                1,\r\n                3\r\n              );\r\n            } else if (caret < 3) {\r\n              this._updateHEXColorSection(\r\n                \"g\",\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub,\r\n                3,\r\n                5\r\n              );\r\n            } else if ((caret <= 4 && length <= 4) || caret < 4) {\r\n              this._updateHEXColorSection(\r\n                \"b\",\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub,\r\n                5,\r\n                7\r\n              );\r\n            } else if (caret <= 5) {\r\n              this._updateHEXAlphaSection(\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub\r\n              );\r\n            }\r\n          } else {\r\n            if (caret < 3) {\r\n              this._updateHEXColorSection(\r\n                \"r\",\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub,\r\n                1,\r\n                3\r\n              );\r\n            } else if (caret < 5) {\r\n              this._updateHEXColorSection(\r\n                \"g\",\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub,\r\n                3,\r\n                5\r\n              );\r\n            } else if ((caret <= 7 && length == 7) || caret < 7) {\r\n              this._updateHEXColorSection(\r\n                \"b\",\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub,\r\n                5,\r\n                7\r\n              );\r\n            } else if (caret <= 9) {\r\n              this._updateHEXAlphaSection(\r\n                event,\r\n                YKColorPicker._gt,\r\n                0,\r\n                YKColorPicker._sub\r\n              );\r\n            }\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onInputHEX(event: Event) {\r\n    const rgb = YKColorParser.HEXtoRGBA(\r\n      (event.target as HTMLInputElement).value.trim()\r\n    );\r\n    if (rgb != null) {\r\n      const { r, g, b, a } = rgb;\r\n      this._color.a = a;\r\n      this._color.rgb = { r, g, b };\r\n      this._color.hex = YKColorParser.RGBAtoHEX(r, g, b, a);\r\n      this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n      this._updateColorPreview(true);\r\n      this._updateHueThumb();\r\n      this._updateOpacityThumb();\r\n      this._updateCursorThumb();\r\n    }\r\n  }\r\n\r\n  private _onChangeInputHEX(event: Event) {\r\n    (event.target as HTMLInputElement).value = this._color.hex;\r\n  }\r\n\r\n  private _onKeyDownInputA(event: KeyboardEvent) {\r\n    const { target, key } = event;\r\n    switch (key) {\r\n      case \"ArrowUp\":\r\n        {\r\n          switch (this._currentRepresentation) {\r\n            case YKColorPickerMode.RGB:\r\n              {\r\n                let { r, g, b } = this._color.rgb;\r\n                r = Math.round(r);\r\n                if (r < 255) {\r\n                  this._color.rgb.r = (target as HTMLInputElement).value =\r\n                    (++r).toString();\r\n                  this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n                  this._rgbUpdateView();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSV:\r\n            case YKColorPickerMode.HSL:\r\n              {\r\n                let { h } = this._color.hsv;\r\n                h = Math.round(h);\r\n                if (h < 360) {\r\n                  (target as HTMLInputElement).value = ++h + \"°\";\r\n                  this._color.hsv.h = this._color.hsl.h = h;\r\n                  this._updateColorPreview(true);\r\n                  this._updateHueThumb();\r\n                }\r\n              }\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        {\r\n          switch (this._currentRepresentation) {\r\n            case YKColorPickerMode.RGB:\r\n              {\r\n                let { r, g, b } = this._color.rgb;\r\n                r = Math.round(r);\r\n                if (r > 0) {\r\n                  this._color.rgb.r = (target as HTMLInputElement).value =\r\n                    (--r).toString();\r\n                  this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n                  this._rgbUpdateView();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSV:\r\n            case YKColorPickerMode.HSL:\r\n              {\r\n                let { h } = this._color.hsv;\r\n                h = Math.round(h);\r\n                if (h > 0) {\r\n                  (target as HTMLInputElement).value = --h + \"°\";\r\n                  this._color.hsv.h = this._color.hsl.h = h;\r\n                  this._updateColorPreview(true);\r\n                  this._updateHueThumb();\r\n                }\r\n              }\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onInputA(event: Event) {\r\n    const value = parseInt((event.target as HTMLInputElement).value || \"0\");\r\n    if (/^(\\d{1,3})(°?)$/.test(value.toString())) {\r\n      switch (this._currentRepresentation) {\r\n        case YKColorPickerMode.RGB:\r\n          {\r\n            const { g, b } = this._color.rgb;\r\n            if (!isNaN(value) && value >= 0 && value <= 255) {\r\n              this._color.rgb.r = value;\r\n              this._color.hsv = YKColorParser.RGBtoHSV(value, g, b);\r\n              this._updateColorPreview(true);\r\n              this._updateHueThumb();\r\n              this._updateCursorThumb();\r\n            }\r\n          }\r\n          break;\r\n\r\n        case YKColorPickerMode.HSV:\r\n        case YKColorPickerMode.HSL:\r\n          {\r\n            if (!isNaN(value) && value >= 0 && value <= 360) {\r\n              this._color.hsv.h = this._color.hsl.h = value;\r\n              this._updateColorPreview(true);\r\n              this._updateHueThumb();\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onChangeInputA(event: Event) {\r\n    let value = (event.target as HTMLInputElement).value;\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB:\r\n        {\r\n          value = Math.round(this._color.rgb.r).toString();\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HSV:\r\n      case YKColorPickerMode.HSL:\r\n        {\r\n          value = `${Math.round(this._color.hsv.h)}°`;\r\n        }\r\n        break;\r\n    }\r\n    (event.target as HTMLInputElement).value = value;\r\n  }\r\n\r\n  private _onKeyDownInputB(event: KeyboardEvent) {\r\n    const { target, key } = event;\r\n    switch (key) {\r\n      case \"ArrowUp\":\r\n        {\r\n          switch (this._currentRepresentation) {\r\n            case YKColorPickerMode.RGB:\r\n              {\r\n                let { r, g, b } = this._color.rgb;\r\n                g = Math.round(g);\r\n                if (g < 255) {\r\n                  this._color.rgb.g = (target as HTMLInputElement).value =\r\n                    (++g).toString();\r\n                  this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n                  this._rgbUpdateView();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSV:\r\n              {\r\n                let { s } = this._color.hsv;\r\n                s = Math.round(s);\r\n                if (s < 100) {\r\n                  (target as HTMLInputElement).value = ++s + \"%\";\r\n                  this._color.hsv.s = s;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSL:\r\n              {\r\n                const { h, s, l } = this._color.hsl;\r\n                let hsl_s = Math.round(s);\r\n                if (hsl_s < 100) {\r\n                  (target as HTMLInputElement).value = ++hsl_s + \"%\";\r\n                  this._color.hsl.s = hsl_s;\r\n                  this._color.hsv.s = YKColorParser.HSLtoHSV(h, hsl_s, l).s;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        {\r\n          switch (this._currentRepresentation) {\r\n            case YKColorPickerMode.RGB:\r\n              {\r\n                let { r, g, b } = this._color.rgb;\r\n                g = Math.round(g);\r\n                if (g > 0) {\r\n                  this._color.rgb.g = (target as HTMLInputElement).value =\r\n                    (--g).toString();\r\n                  this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n                  this._rgbUpdateView();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSV:\r\n              {\r\n                let { s } = this._color.hsv;\r\n                s = Math.round(s);\r\n                if (s > 0) {\r\n                  (target as HTMLInputElement).value = --s + \"%\";\r\n                  this._color.hsv.s = s;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSL:\r\n              {\r\n                const { h, s, l } = this._color.hsl;\r\n                let hsl_s = Math.round(s);\r\n                if (hsl_s > 0) {\r\n                  (target as HTMLInputElement).value = --hsl_s + \"%\";\r\n                  this._color.hsl.s = hsl_s;\r\n                  this._color.hsv.s = YKColorParser.HSLtoHSV(h, hsl_s, l).s;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onInputB(event: Event) {\r\n    const value = parseInt((event.target as HTMLInputElement).value || \"0\");\r\n    if (/^(\\d{1,3})(%?)$/.test(value.toString())) {\r\n      switch (this._currentRepresentation) {\r\n        case YKColorPickerMode.RGB:\r\n          {\r\n            const { r, b } = this._color.rgb;\r\n            if (!isNaN(value) && value >= 0 && value <= 255) {\r\n              this._color.rgb.g = value;\r\n              this._color.hsv = YKColorParser.RGBtoHSV(r, value, b);\r\n              this._updateColorPreview(true);\r\n              this._updateHueThumb();\r\n              this._updateCursorThumb();\r\n            }\r\n          }\r\n          break;\r\n\r\n        case YKColorPickerMode.HSV:\r\n          {\r\n            if (!isNaN(value) && value >= 0 && value <= 100) {\r\n              this._color.hsv.s = value;\r\n              this._updateColorPreview(true);\r\n              this._updateCursorThumb();\r\n            }\r\n          }\r\n          break;\r\n\r\n        case YKColorPickerMode.HSL:\r\n          {\r\n            const { h, l } = this._color.hsl;\r\n            if (!isNaN(value) && value >= 0 && value <= 100) {\r\n              this._color.hsl.s = value;\r\n              this._color.hsv = YKColorParser.HSLtoHSV(h, value, l);\r\n              this._updateColorPreview(true);\r\n              this._updateCursorThumb();\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onChangeInputB(event: Event) {\r\n    let value = (event.target as HTMLInputElement).value;\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB:\r\n        {\r\n          value = Math.round(this._color.rgb.g).toString();\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HSV:\r\n        {\r\n          value = `${Math.round(this._color.hsv.s)}%`;\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HSL:\r\n        {\r\n          value = `${Math.round(this._color.hsl.s)}%`;\r\n        }\r\n        break;\r\n    }\r\n    (event.target as HTMLInputElement).value = value;\r\n  }\r\n\r\n  private _onKeyDownInputC(event: KeyboardEvent) {\r\n    const { target, key } = event;\r\n    switch (key) {\r\n      case \"ArrowUp\":\r\n        {\r\n          switch (this._currentRepresentation) {\r\n            case YKColorPickerMode.RGB:\r\n              {\r\n                let { r, g, b } = this._color.rgb;\r\n                b = Math.round(b);\r\n                if (b < 255) {\r\n                  this._color.rgb.b = (target as HTMLInputElement).value =\r\n                    (++b).toString();\r\n                  this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n                  this._rgbUpdateView();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSV:\r\n              {\r\n                let { v } = this._color.hsv;\r\n                v = Math.round(v);\r\n                if (v < 100) {\r\n                  (target as HTMLInputElement).value = ++v + \"%\";\r\n                  this._color.hsv.v = v;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSL:\r\n              {\r\n                const { h, s, l } = this._color.hsl;\r\n                let hsl_l = Math.round(l);\r\n                if (hsl_l < 100) {\r\n                  (target as HTMLInputElement).value = ++hsl_l + \"%\";\r\n                  this._color.hsl.l = hsl_l;\r\n                  this._color.hsv.v = YKColorParser.HSLtoHSV(h, s, hsl_l).v;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n      case \"ArrowDown\":\r\n        {\r\n          switch (this._currentRepresentation) {\r\n            case YKColorPickerMode.RGB:\r\n              {\r\n                let { r, g, b } = this._color.rgb;\r\n                b = Math.round(b);\r\n                if (b > 0) {\r\n                  this._color.rgb.b = (target as HTMLInputElement).value =\r\n                    (--b).toString();\r\n                  this._color.hsv = YKColorParser.RGBtoHSV(r, g, b);\r\n                  this._rgbUpdateView();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSV:\r\n              {\r\n                let { v } = this._color.hsv;\r\n                v = Math.round(v);\r\n                if (v > 0) {\r\n                  (target as HTMLInputElement).value = --v + \"%\";\r\n                  this._color.hsv.v = v;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n\r\n            case YKColorPickerMode.HSL:\r\n              {\r\n                const { h, s, l } = this._color.hsl;\r\n                let hsl_l = Math.round(l);\r\n                if (l > 0) {\r\n                  (target as HTMLInputElement).value = --hsl_l + \"%\";\r\n                  this._color.hsl.l = hsl_l;\r\n                  this._color.hsv.v = YKColorParser.HSLtoHSV(h, s, hsl_l).v;\r\n                  this._updateColorPreview(true);\r\n                  this._updateCursorThumb();\r\n                }\r\n              }\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onInputC(event: Event) {\r\n    const value = parseInt((event.target as HTMLInputElement).value || \"0\");\r\n    if (/^(\\d{1,3})(%?)$/.test(value.toString())) {\r\n      switch (this._currentRepresentation) {\r\n        case YKColorPickerMode.RGB:\r\n          {\r\n            const { r, g } = this._color.rgb;\r\n            if (!isNaN(value) && value >= 0 && value <= 255) {\r\n              this._color.rgb.b = value;\r\n              this._color.hsv = YKColorParser.RGBtoHSV(r, g, value);\r\n              this._updateColorPreview(true);\r\n              this._updateHueThumb();\r\n              this._updateCursorThumb();\r\n            }\r\n          }\r\n          break;\r\n\r\n        case YKColorPickerMode.HSV:\r\n          {\r\n            if (!isNaN(value) && value >= 0 && value <= 100) {\r\n              this._color.hsv.v = value;\r\n              this._updateColorPreview(true);\r\n              this._updateCursorThumb();\r\n            }\r\n          }\r\n          break;\r\n\r\n        case YKColorPickerMode.HSL:\r\n          {\r\n            const { h, s } = this._color.hsl;\r\n            if (!isNaN(value) && value >= 0 && value <= 100) {\r\n              this._color.hsl.l = value;\r\n              this._color.hsv = YKColorParser.HSLtoHSV(h, s, value);\r\n              this._updateColorPreview(true);\r\n              this._updateCursorThumb();\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onChangeInputC(event: Event) {\r\n    let value = (event.target as HTMLInputElement).value;\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB:\r\n        {\r\n          value = Math.round(this._color.rgb.b).toString();\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HSV:\r\n        {\r\n          value = `${Math.round(this._color.hsv.v)}%`;\r\n        }\r\n        break;\r\n\r\n      case YKColorPickerMode.HSL:\r\n        {\r\n          value = `${Math.round(this._color.hsl.l)}%`;\r\n        }\r\n        break;\r\n    }\r\n    (event.target as HTMLInputElement).value = value;\r\n  }\r\n\r\n  private _onClickCopyColor() {\r\n    if (this._copyTimeout) {\r\n      clearTimeout(this._copyTimeout);\r\n    }\r\n    const input = document.createElement(\"input\");\r\n    input.style.position = \"absolute\";\r\n    input.style.left = \"-99999px\";\r\n    input.style.top = \"-99999px\";\r\n    input.value = this._getColorText();\r\n    document.body.appendChild(input);\r\n    input.select();\r\n\r\n    try {\r\n      document.execCommand(\"copy\");\r\n      this._attachCheckIcon();\r\n      this._dom.copyColor.focus();\r\n      this._options.onCopy(this);\r\n\r\n      this._copyTimeout = setTimeout(() => {\r\n        this._attachCopyIcon();\r\n        this._copyTimeout = null;\r\n      }, 600);\r\n    } catch (err) {\r\n      document.body.removeChild(input);\r\n      throw new Error(\"YKColorPicker:: Failed to copy color.\\n\" + err);\r\n    }\r\n  }\r\n\r\n  private _onMouseDownHueSlider(event: MouseEvent) {\r\n    event.preventDefault(); // prevent default to set focus on the thumb\r\n    this._dc = true;\r\n    attachEvent(document, \"pointermove\", this._onMouseMoveHueSliderBind);\r\n    attachEvent(document, \"pointerup\", this._onMouseUpHueSliderBind);\r\n    this._dom.hueThumb.focus();\r\n    this._onMouseMoveHueSliderBind(event);\r\n  }\r\n\r\n  private _onMouseUpHueSlider(event: MouseEvent) {\r\n    document.removeEventListener(\"pointermove\", this._onMouseMoveHueSliderBind);\r\n    document.removeEventListener(\"pointerup\", this._onMouseUpHueSliderBind);\r\n    if (this._dom.overlayWrapper.contains(event.target)) {\r\n      this._dc = false;\r\n    }\r\n  }\r\n\r\n  private _onMouseMoveHueSlider(event: MouseEvent) {\r\n    const { hueSlider, hueThumb } = this._dom;\r\n    const sliderRect = hueSlider.getBoundingClientRect();\r\n    const sliderWidth = sliderRect.width;\r\n    let thumbX = event.clientX - sliderRect.left;\r\n\r\n    if (thumbX < 0) {\r\n      thumbX = 0;\r\n    }\r\n    if (thumbX > sliderWidth) {\r\n      thumbX = sliderWidth;\r\n    }\r\n\r\n    this._color.hsv.h = (thumbX / sliderRect.width) * 360;\r\n    hueThumb.style.translate = `${thumbX}px`;\r\n\r\n    this._updateSettingsView();\r\n  }\r\n\r\n  private _onMouseDownOpacitySlider(event: MouseEvent) {\r\n    event.preventDefault(); // prevent default to set focus on the thumb\r\n    this._dc = true;\r\n    attachEvent(document, \"pointermove\", this._onMouseMoveOpacitySliderBind);\r\n    attachEvent(document, \"pointerup\", this._onMouseUpOpacitySliderBind);\r\n    this._dom.opacityThumb.focus();\r\n    this._onMouseMoveOpacitySliderBind(event);\r\n  }\r\n\r\n  private _onMouseUpOpacitySlider(event: MouseEvent) {\r\n    document.removeEventListener(\r\n      \"pointermove\",\r\n      this._onMouseMoveOpacitySliderBind\r\n    );\r\n    document.removeEventListener(\"pointerup\", this._onMouseUpOpacitySliderBind);\r\n    if (this._dom.overlayWrapper.contains(event.target)) {\r\n      this._dc = false;\r\n    }\r\n  }\r\n\r\n  private _onMouseMoveOpacitySlider(event: MouseEvent) {\r\n    const { opacitySlider, opacityThumb } = this._dom;\r\n    const opacitySliderRect = opacitySlider.getBoundingClientRect();\r\n    const sliderWidth = opacitySliderRect.width;\r\n    let thumbX = event.clientX - opacitySliderRect.left;\r\n    opacityThumb.focus();\r\n\r\n    if (thumbX < 0) {\r\n      thumbX = 0;\r\n    }\r\n    if (thumbX > sliderWidth) {\r\n      thumbX = sliderWidth;\r\n    }\r\n\r\n    opacityThumb.style.translate = `${thumbX}px`;\r\n    this._updateOpacityValue(thumbX / sliderWidth);\r\n  }\r\n\r\n  private _onKeyDownHueSlider(event: KeyboardEvent) {\r\n    const { key } = event;\r\n    switch (key) {\r\n      case \"ArrowUp\":\r\n      case \"ArrowRight\":\r\n        {\r\n          const { hueThumb, hueSlider } = this._dom;\r\n          let position = parseInt(hueThumb.style.translate);\r\n          if (!isNaN(position) && position < hueSlider.offsetWidth) {\r\n            hueThumb.style.translate = `${++position}px`;\r\n            this._color.hsv.h = (position / hueSlider.offsetWidth) * 360;\r\n            this._updateSettingsView();\r\n          }\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n\r\n      case \"ArrowDown\":\r\n      case \"ArrowLeft\":\r\n        {\r\n          const { hueThumb, hueSlider } = this._dom;\r\n          let position = parseInt(hueThumb.style.translate);\r\n          if (!isNaN(position) && position > 0) {\r\n            hueThumb.style.translate = `${--position}px`;\r\n            this._color.hsv.h = (position / hueSlider.offsetWidth) * 360;\r\n            this._updateSettingsView();\r\n          }\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onKeyDownOpacitySlider(event: KeyboardEvent) {\r\n    const { key } = event;\r\n    switch (key) {\r\n      case \"ArrowUp\":\r\n      case \"ArrowRight\":\r\n        {\r\n          const { opacityThumb, opacitySlider } = this._dom;\r\n          let position = parseInt(opacityThumb.style.translate);\r\n          if (!isNaN(position) && position < opacitySlider.offsetWidth) {\r\n            opacityThumb.style.translate = `${++position}px`;\r\n            this._updateOpacityValue(position / opacitySlider.offsetWidth);\r\n          }\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n\r\n      case \"ArrowDown\":\r\n      case \"ArrowLeft\":\r\n        {\r\n          const { opacityThumb, opacitySlider } = this._dom;\r\n          let position = parseInt(opacityThumb.style.translate);\r\n          if (!isNaN(position) && position > 0) {\r\n            opacityThumb.style.translate = `${--position}px`;\r\n            this._updateOpacityValue(position / opacitySlider.offsetWidth);\r\n          }\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _onKeyUpClose(event: KeyboardEvent) {\r\n    if (\r\n      event.key == \"Enter\" &&\r\n      this._isOpen &&\r\n      ![this._dom.copyColor, this._dom.btnSwitch].includes(event.target)\r\n    ) {\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    if (event.key == \"Escape\") {\r\n      if (this._prevColor != this.getHEX()) {\r\n        this.setColor(this._prevColor);\r\n        this._updateGUI();\r\n        this._options.onInput(this);\r\n      }\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  private _onResizeScrollWindow(event: Event) {\r\n    const { type } = event;\r\n    const { target, closeOnScroll, closeOnResize } = this._options;\r\n    if (\r\n      (type == \"scroll\" && closeOnScroll) ||\r\n      (type == \"resize\" && closeOnResize)\r\n    ) {\r\n      this.close();\r\n    } else {\r\n      if (target == null) {\r\n        return;\r\n      }\r\n      if (!YKColorPicker._isTargetInViewport(this._options.target)) {\r\n        this.close();\r\n        return;\r\n      }\r\n      this._setPositionAxis(this._getPositionAxis());\r\n    }\r\n  }\r\n\r\n  private _removeWindowEvents() {\r\n    window.removeEventListener(\"resize\", this._onResizeScrollWindowBind);\r\n    window.removeEventListener(\"scroll\", this._onResizeScrollWindowBind);\r\n    document.removeEventListener(\"keyup\", this._onKeyUpCloseBind);\r\n    document.removeEventListener(\"click\", this._onClickCloseBind);\r\n  }\r\n\r\n  private _getCursorPosition(clientX: number, clientY: number) {\r\n    const paletteRect = this._dom.palette.getBoundingClientRect();\r\n    let xAxis = clientX - paletteRect.left;\r\n    let yAxis = clientY - paletteRect.top;\r\n\r\n    if (xAxis < 0) {\r\n      xAxis = 0;\r\n    } else if (xAxis > paletteRect.width) {\r\n      xAxis = paletteRect.width;\r\n    }\r\n    if (yAxis < 0) {\r\n      yAxis = 0;\r\n    } else if (yAxis > paletteRect.height) {\r\n      yAxis = paletteRect.height;\r\n    }\r\n\r\n    return {\r\n      x: xAxis,\r\n      y: yAxis,\r\n    };\r\n  }\r\n\r\n  private _updateHEXColor() {\r\n    const { r, g, b } = (this._color.rgb = this._color.toRGB());\r\n    this._color.hex = YKColorParser.RGBAtoHEX(r, g, b, this._color.a);\r\n  }\r\n\r\n  private _getColorText() {\r\n    switch (this._currentRepresentation) {\r\n      case YKColorPickerMode.RGB:\r\n        const { r, g, b } = this._color.rgb;\r\n        return `rgba(${Math.round(r)}, ${Math.round(g)}, ${Math.round(b)}, ${\r\n          this._color.a\r\n        })`;\r\n\r\n      case YKColorPickerMode.HSV: {\r\n        const { h, s, v } = this._color.hsv;\r\n        return `hsva(${Math.round(h)}, ${Math.round(s)}%, ${Math.round(v)}%, ${\r\n          this._color.a\r\n        })`;\r\n      }\r\n\r\n      case YKColorPickerMode.HSL: {\r\n        const { h, s, l } = this._color.hsl;\r\n        return `hsla(${Math.round(h)}, ${Math.round(s)}%, ${Math.round(l)}%, ${\r\n          this._color.a\r\n        })`;\r\n      }\r\n\r\n      case YKColorPickerMode.HEX:\r\n        return this.getHEX();\r\n    }\r\n  }\r\n\r\n  private _getCaretPosition(target: HTMLInputElement) {\r\n    let position = target.selectionStart || 0;\r\n    const length = target.value.length;\r\n    if (position > length) {\r\n      position = length;\r\n    }\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAxis(): Point {\r\n    const { target, position, positionFallback } = this._options;\r\n    if (!target || !position || !positionFallback) {\r\n      return { x: 0, y: 0 };\r\n    }\r\n    const targetRect = target.getBoundingClientRect();\r\n    const colorPickerRect = this._dom.overlayWrapper.getBoundingClientRect();\r\n    const scrollTop = document.documentElement.scrollTop;\r\n    const scrollLeft = document.documentElement.scrollLeft;\r\n    const offset = 6;\r\n    let _position = position;\r\n\r\n    const _stateSpaceInTop = YKColorPicker._enoughSpace(\r\n      () => scrollTop + targetRect.top,\r\n      () => targetRect.top,\r\n      colorPickerRect.height + offset\r\n    );\r\n    const _stateSpaceInBottom = YKColorPicker._enoughSpace(\r\n      () =>\r\n        YKColorPicker._getPageHeight() -\r\n        (scrollTop + targetRect.top + targetRect.height),\r\n      () => window.innerHeight - (targetRect.top + targetRect.height),\r\n      colorPickerRect.height + offset\r\n    );\r\n    const _stateSpaceInLeft = YKColorPicker._enoughSpace(\r\n      () => scrollLeft + targetRect.left,\r\n      () => targetRect.left,\r\n      colorPickerRect.width + offset\r\n    );\r\n    const _stateSpaceInRight = YKColorPicker._enoughSpace(\r\n      () =>\r\n        YKColorPicker._getPageWidth() -\r\n        (scrollLeft + targetRect.left + targetRect.width),\r\n      () => window.innerWidth - (targetRect.left + targetRect.width),\r\n      colorPickerRect.width + offset\r\n    );\r\n\r\n    const states: any = {\r\n      t: _stateSpaceInTop,\r\n      b: _stateSpaceInBottom,\r\n      l: _stateSpaceInLeft,\r\n      r: _stateSpaceInRight,\r\n    };\r\n    let positions = \"\";\r\n\r\n    for (let i = 0; i < positionFallback.length; i++) {\r\n      positions += positionFallback[i] + states[positionFallback[i]];\r\n    }\r\n\r\n    let bestPositions = \"\";\r\n    let secondPositions = \"\";\r\n\r\n    for (let i = 1; i < positions.length; i += 2) {\r\n      const state = positions[i];\r\n      if (state == \"2\") {\r\n        bestPositions = bestPositions + positions[i - 1];\r\n      }\r\n      if (state == \"1\") {\r\n        secondPositions = secondPositions + positions[i - 1];\r\n      }\r\n    }\r\n\r\n    if (bestPositions != \"\") {\r\n      if (bestPositions.includes(_position) == false) {\r\n        _position = bestPositions[0] as YKColorPickerPosition;\r\n      }\r\n    } else if (secondPositions != \"\") {\r\n      if (secondPositions.includes(_position) == false) {\r\n        _position = secondPositions[0] as YKColorPickerPosition;\r\n      }\r\n    } else {\r\n      _position = YKColorPickerPosition.BOTTOM;\r\n    }\r\n\r\n    let x_axis = 0;\r\n    let y_axis = 0;\r\n\r\n    switch (_position) {\r\n      case YKColorPickerPosition.TOP:\r\n        y_axis = targetRect.top - colorPickerRect.height - offset;\r\n        x_axis =\r\n          targetRect.left + targetRect.width / 2 - colorPickerRect.width / 2;\r\n        break;\r\n\r\n      case YKColorPickerPosition.BOTTOM:\r\n        y_axis = targetRect.top + targetRect.height + offset;\r\n        x_axis =\r\n          targetRect.left + targetRect.width / 2 - colorPickerRect.width / 2;\r\n        break;\r\n\r\n      case YKColorPickerPosition.LEFT:\r\n        y_axis =\r\n          targetRect.top + targetRect.height / 2 - colorPickerRect.height / 2;\r\n        x_axis = targetRect.left - colorPickerRect.width - offset;\r\n        break;\r\n\r\n      case YKColorPickerPosition.RIGHT:\r\n        y_axis =\r\n          targetRect.top + targetRect.height / 2 - colorPickerRect.height / 2;\r\n        x_axis = targetRect.left + targetRect.width + offset;\r\n        break;\r\n    }\r\n\r\n    // Make sure the color picker won't go beyond viewport by adjusting the x and y axis.\r\n    // Calculate scrollbar for x and y.\r\n    const xScrollbar = window.innerWidth - document.documentElement.clientWidth;\r\n    const yScrollbar =\r\n      window.innerHeight - document.documentElement.clientHeight;\r\n\r\n    if (window.innerWidth - xScrollbar < x_axis + colorPickerRect.width) {\r\n      x_axis -= x_axis + colorPickerRect.width - window.innerWidth + xScrollbar;\r\n    }\r\n    if (window.innerHeight - yScrollbar < y_axis + colorPickerRect.height) {\r\n      y_axis -=\r\n        y_axis + colorPickerRect.height - window.innerHeight + yScrollbar;\r\n    }\r\n\r\n    x_axis = Math.max(x_axis, 0);\r\n    y_axis = Math.max(y_axis, 0);\r\n\r\n    return {\r\n      x: x_axis,\r\n      y: y_axis,\r\n    };\r\n  }\r\n\r\n  private _setPositionAxis(axis: Point) {\r\n    const { x, y } = axis;\r\n    this._dom.overlayWrapper.style.top = `${y}px`;\r\n    this._dom.overlayWrapper.style.left = `${x}px`;\r\n  }\r\n\r\n  private _updateRepresentation(value: YKColorPickerMode) {\r\n    this._currentRepresentation = value;\r\n    this._updateInputs();\r\n    if (this._options.onRepresentationChange) {\r\n      this._options.onRepresentationChange(this);\r\n    }\r\n  }\r\n\r\n  private static _isTargetInViewport(target: HTMLElement | undefined) {\r\n    if (!target) {\r\n      return false;\r\n    }\r\n\r\n    const rect = target.getBoundingClientRect();\r\n    return (\r\n      rect.top >= 0 &&\r\n      rect.left >= 0 &&\r\n      rect.bottom <=\r\n        (window.innerHeight || document.documentElement.clientHeight) &&\r\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\r\n    );\r\n  }\r\n\r\n  private static _getPageHeight() {\r\n    return Math.max(\r\n      document.body.scrollHeight,\r\n      document.documentElement.scrollHeight,\r\n      document.body.offsetHeight,\r\n      document.documentElement.offsetHeight,\r\n      document.body.clientHeight,\r\n      document.documentElement.clientHeight\r\n    );\r\n  }\r\n\r\n  private static _getPageWidth() {\r\n    return Math.max(\r\n      document.body.scrollWidth,\r\n      document.documentElement.scrollWidth,\r\n      document.body.offsetWidth,\r\n      document.documentElement.offsetWidth,\r\n      document.body.clientWidth,\r\n      document.documentElement.clientWidth\r\n    );\r\n  }\r\n\r\n  private static _enoughSpace(\r\n    condition1: () => number,\r\n    condition2: () => number,\r\n    boxSize: number\r\n  ) {\r\n    if (condition1() >= boxSize) {\r\n      if (condition2() >= boxSize) {\r\n        return 2;\r\n      }\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  private static _buildOptions(\r\n    baseOptions: __YKColorPickerOptions,\r\n    options: YKColorPickerOptions\r\n  ): __YKColorPickerOptions {\r\n    const _options: any = {};\r\n    const keys: string[] = Object.keys(baseOptions);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key: string = keys[i];\r\n      if (options.hasOwnProperty(key) == true) {\r\n        (_options as any)[key] = (options as any)[key];\r\n      } else {\r\n        (_options as any)[key] = (baseOptions as any)[key];\r\n      }\r\n    }\r\n    return _options;\r\n  }\r\n\r\n  private static _lt(a: number, b: number) {\r\n    return a < b;\r\n  }\r\n\r\n  private static _gt(a: number, b: number) {\r\n    return a > b;\r\n  }\r\n\r\n  private static _add(a: number, b: number) {\r\n    return a + b;\r\n  }\r\n\r\n  private static _sub(a: number, b: number) {\r\n    return a - b;\r\n  }\r\n}\r\n"],"names":["hexPad2","value","createElement","tag","classList","attributes","el","key","attachEvent","element","eventName","eventHandler","YKColorParser","color","rgb","_rgb","h","s","v","r","g","b","a","regexRGB","splitColor","i","max","min","d","l","hsv1","hex","splitHexValues","YKColor","f","q","t","_saturation","_value","_lightness","_saturate","YKColorPickerPosition","YKColorPickerMode","_YKColorPicker","options","target","representation","_options","cp_overlayWrapper","cp_Wrapper","event","paletteWrapper","palette","cursor","colorSettings","inputsSettings","inputsWrapper","btnSwitch","inputWrapper","inputHEX","labelHEX","inputA","inputB","inputC","inputD","labelA","labelB","labelC","labelD","model","opacitySlider","opacityThumb","hueThumb","hueSlider","c","fireEvent","alpha","hsl","colorPreview","paletteBGColor","hslColor","copyColor","path","svgElement","sliders","sliderWrapper","slider","sliderThumb","colorPreviewWrapper","con","conValue","op","startSelect","endSelect","callEvent","_container","overlayWrapper","parent","e","x","y","paletteHeight","paletteWidth","alphaValue","caret","length","hsl_s","hsl_l","input","err","sliderRect","sliderWidth","thumbX","opacitySliderRect","position","type","closeOnScroll","closeOnResize","clientX","clientY","paletteRect","xAxis","yAxis","positionFallback","targetRect","colorPickerRect","scrollTop","scrollLeft","offset","_position","_stateSpaceInTop","_stateSpaceInBottom","_stateSpaceInLeft","_stateSpaceInRight","states","positions","bestPositions","secondPositions","state","x_axis","y_axis","xScrollbar","yScrollbar","axis","rect","condition1","condition2","boxSize","baseOptions","keys","YKColorPicker"],"mappings":"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"}